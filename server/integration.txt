Google Authentication
https://youtu.be/tgO_ADSvY1I?si=VLu6jC8V1WotrjCY

Merging related conflicts
https://youtu.be/mSfq1SoMocg?si=TAnaWYjL9gmXBIuM


// // const express = require("express");
// // const router = express.Router();
// // const adminController = require("../../controllers/adminController");

// // // Authentication
// // router.post("/login", adminController.login);
// // router.post("/signup", adminController.signup);
// // router.post("/login/google", adminController.googleLogin);
// // router.post("/logout", adminController.logout);
// // router.get("/session", adminController.checkSession);
// // router.post("/verify-email", adminController.verifyEmail);
// // router.put("/update-profile", adminController.updateProfile);
// // router.post("/refresh-token", adminController.refreshToken);

// // // Request Management
// // router.put("/request/:id/accept", adminController.acceptRequest);
// // router.put("/request/:id/decline", adminController.declineRequest);
// // router.get("/requests/pending", adminController.viewPendingRequests);
// // router.get("/requests/borrowed", adminController.viewBorrowedItems);

// // // Inventory Management
// // router.get("/items/search", adminController.searchItems);
// // router.get("/items/filter", adminController.filterItems);
// // router.post("/items", adminController.addItem);
// // router.put("/items/:id", adminController.updateItem);
// // router.put("/items/:id/archive", adminController.archiveItem);
// // router.get("/items/archived", adminController.viewArchivedItems);
// // router.post("/items/scanReturn", adminController.scanItemReturn);

// // // Notifications
// // router.get("/notifications", adminController.viewNotifications);

// // // Reporting
// // router.get("/reports", adminController.viewReports);

// // module.exports = router;

// const express = require("express");
// const router = express.Router();
// const userController = require("../../controllers/userController");

// // Authentication
// router.post("/login", userController.login);
// router.post("/signup", userController.signup);
// router.post("/login/google", userController.googleLogin);
// router.post("/logout", userController.logout);
// router.get("/session", userController.checkSession);
// router.post("/verify-email", userController.verifyEmail);
// router.put("/update-profile", userController.updateProfile);
// router.post("/refresh-token", userController.refreshToken);

// // Dashboard and Profile
// router.get("/dashboard", userController.getDashboard);
// router.get("/profile", userController.getProfile);

// // Inventory
// router.get("/inventory/search", userController.searchInventory);
// router.get("/inventory/view", userController.viewInventory);
// router.get("/inventory/sort", userController.sortInventory);

// // Bookings and Requests
// router.post("/bookings", userController.placeBooking);
// router.delete("/bookings/cancel", userController.cancelBooking);
// router.get("/requests", userController.viewRequests);
// router.get("/bookings/pending", userController.viewPendingBookings);
// router.get("/bookings/accepted", userController.viewAcceptedBookings);
// router.get("/bookings/return", userController.viewItemsToReturn);
// router.post("/items/scanReturn", userController.scanItemReturn);

// // Notifications and Reports
// router.get("/notifications", userController.viewNotifications);
// router.get("/reports/returned", userController.viewReturnedReports);

// module.exports = router;



last part 
// const router = Router();
// import studentModel from "../../models/userStudent.js"; // Adjust path if necessary

// // Get all users
// router.get("/", async (req, res) => {
//   // Logic to retrieve all users
//   //res.send({ data: "Here is the list of all users" });

//   try {
//     const students = await studentModel.find();
//     res.send({ data: students });
//   } catch (error) {
//     res.status(500).send({ error: "Failed to retrieve students" });
//   }
// });

// // Get a specific user by ID
// router.get("/:userId", async (req, res) => {
//   //const { userId } = req.params; // Get the user ID from the request parameters
//   // Logic to retrieve a specific user by ID
//   //res.send({ data: `Details for user with ID: ${userId}` });

//   const { userId } = req.params;
//   try {
//     const student = await studentModel.findOne({ user_id: userId });
//     if (student) {
//       res.send({ data: student });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to retrieve student" });
//   }
// });

// router.post("/", async (req, res) => {
//   const { name, user_id, gender, email, year, course } = req.body;
//   const students = req.body; // Expecting an array of student objects
//   try {
//     // Validate that the request body is an array
//     if (!Array.isArray(students)) {
//       const newStudent = new studentModel({
//         name,
//         user_id,
//         gender,
//         email,
//         year,
//         course,
//       });
//       await newStudent.save();
//       res.send({ data: `Student ${name} created successfully` });
//     } else {
//       const newStudents = await Promise.all(
//         students.map(async (studentData) => {
//           const { name, user_id, gender, email, year, course } = studentData;
//           const newStudent = new studentModel({
//             name,
//             user_id,
//             gender,
//             email,
//             year,
//             course,
//           });
//           return newStudent.save();
//         })
//       );

//       res.send({
//         data: `${newStudents.length} students created successfully`,
//       });
//     }

//     // Map over the array to create and save each student concurrently
//   } catch (error) {
//     console.error("Error saving students:", error);
//     res.status(500).send({ error: "Failed to create students" });
//   }
// });

// // Update an existing user
// router.put("/:userId", async (req, res) => {
//   // const { userId } = req.params; // Get the user ID from the request parameters
//   //const { username, email } = req.body; // Assuming you send updated data in the body
//   // Logic to update the user
//   //res.send({ data: `User with ID ${userId} updated successfully` });

//   const { userId } = req.params;
//   const { name, gender, email, year, course } = req.body;
//   try {
//     const updatedStudent = await studentModel.findOneAndUpdate(
//       { user_id: userId },
//       { name, gender, email, year, course },
//       { new: true } // Return the updated document
//     );
//     if (updatedStudent) {
//       res.send({
//         data: `Student with user_id ${userId} updated successfully`,
//         updatedStudent,
//       });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to update student" });
//   }
// });

// // Delete a user by user ID
// // This route deletes a student from the database based on the provided user ID.
// router.delete("/:userId", async (req, res) => {
//   const { userId } = req.params;
//   try {
//     const deletedStudent = await studentModel.findOneAndDelete({
//       user_id: userId,
//     });
//     if (deletedStudent) {
//       res.send({ data: `Student with user_id ${userId} deleted successfully` });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to delete student" });
//   }
// });

// export default router;



// // Get all users
// router.get("/", async (req, res) => {
//   // Logic to retrieve all users
//   //res.send({ data: "Here is the list of all users" });

//   try {
//     const students = await studentModel.find();
//     res.send({ data: students });
//   } catch (error) {
//     res.status(500).send({ error: "Failed to retrieve students" });
//   }
// });

// Get a specific user by ID
// router.get("/:userId", async (req, res) => {
//   //const { userId } = req.params; // Get the user ID from the request parameters
//   // Logic to retrieve a specific user by ID
//   //res.send({ data: `Details for user with ID: ${userId}` });

//   const { userId } = req.params;
//   try {
//     const student = await studentModel.findOne({ user_id: userId });
//     if (student) {
//       res.send({ data: student });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to retrieve student" });
//   }
// });

// POST route to find user by userId in the request body
// router.post("/findUser", async (req, res) => {
//   const { userId } = req.body; // Get userId from the request body
//   try {
//     const student = await studentModel.findOne({ user_id: userId });
//     if (student) {
//       res.send({ data: student });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to retrieve student" });
//   }
// });

// router.post("/", async (req, res) => {
//   const { name, user_id, gender, email, year, course } = req.body;
//   const students = req.body; // Expecting an array of student objects
//   try {
//     // Validate that the request body is an array
//     if (!Array.isArray(students)) {
//       const newStudent = new studentModel({
//         name,
//         user_id,
//         gender,
//         email,
//         year,
//         course,
//       });
//       await newStudent.save();
//       res.send({ data: `Student ${name} created successfully` });
//     } else {
//       const newStudents = await Promise.all(
//         students.map(async (studentData) => {
//           const { name, user_id, gender, email, year, course } = studentData;
//           const newStudent = new studentModel({
//             name,
//             user_id,
//             gender,
//             email,
//             year,
//             course,
//           });
//           return newStudent.save();
//         })
//       );

//       res.send({
//         data: `${newStudents.length} students created successfully`,
//       });
//     }

//     // Map over the array to create and save each student concurrently
//   } catch (error) {
//     console.error("Error saving students:", error);
//     res.status(500).send({ error: "Failed to create students" });
//   }
// });

// // Update an existing user
// router.put("/:userId", async (req, res) => {
//   // const { userId } = req.params; // Get the user ID from the request parameters
//   //const { username, email } = req.body; // Assuming you send updated data in the body
//   // Logic to update the user
//   //res.send({ data: `User with ID ${userId} updated successfully` });

//   const { userId } = req.params;
//   const { name, gender, email, year, course } = req.body;
//   try {
//     const updatedStudent = await studentModel.findOneAndUpdate(
//       { user_id: userId },
//       { name, gender, email, year, course },
//       { new: true } // Return the updated document
//     );
//     if (updatedStudent) {
//       res.send({
//         data: `Student with user_id ${userId} updated successfully`,
//         updatedStudent,
//       });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to update student" });
//   }
// });

// // Delete a user by user ID
// // This route deletes a student from the database based on the provided user ID.
// router.delete("/:userId", async (req, res) => {
//   const { userId } = req.params;
//   try {
//     const deletedStudent = await studentModel.findOneAndDelete({
//       user_id: userId,
//     });
//     if (deletedStudent) {
//       res.send({ data: `Student with user_id ${userId} deleted successfully` });
//     } else {
//       res
//         .status(404)
//         .send({ error: `Student with user_id ${userId} not found` });
//     }
//   } catch (error) {
//     res.status(500).send({ error: "Failed to delete student" });
//   }
// });

// export default router;